* DONE rover
* DONE merchant 
  http://www.careercup.com/question?id=4904931328786432
  MERCHANT'S GUIDE TO THE GALAXY 

You decided to give up on earth after the latest financial collapse left 99.99%
of the earth's population with 0.01% of the wealth. Luckily, with the scant sum
of money that is left in your account, you are able to afford to rent a
spaceship, leave earth, and fly all over the galaxy to sell common metals and
dirt (which apparently is worth a lot).Buying and selling over the galaxy
requires you to convert numbers and units, and you decided to write a program to
help you.The numbers used for intergalactic transactions follows similar
convention to the roman numerals and you have painstakingly collected the
appropriate translation between them.Roman numerals are based on seven symbols:

Symbol	Value 
I	1 
V	5 
X	10 
L	50 
C	100 
D	500 
M	1,000 
Numbers are formed by combining symbols together and adding the values. For
example, MMVI is 1000 + 1000 + 5 + 1 = 2006. Generally, symbols are placed in
order of value, starting with the largest values. When smaller values precede
larger values, the smaller values are subtracted from the larger values, and the
result is added to the total. For example MCMXLIV = 1000 + (1000 − 100) + (50
− 10) + (5 − 1) = 1944. 

The symbols "I", "X", "C", and "M" can be repeated three times in succession,
but no more. (They may appear four times if the third and fourth are separated
by a smaller value, such as XXXIX.) "D", "L", and "V" can never be repeated. 

"I" can be subtracted from "V" and "X" only. "X" can be subtracted from "L" and
"C" only. "C" can be subtracted from "D" and "M" only. "V", "L", and "D" can
never be subtracted. 

Only one small-value symbol may be subtracted from any large-value symbol. 

A number written in Arabic numerals can be broken into digits. For example, 1903
is composed of 1, 9, 0, and 3. To write the Roman numeral, each of the non-zero
digits should be treated separately. In the above example, 1,000 = M, 900 = CM,
and 3 = III. Therefore, 1903 = MCMIII. 

-- Source: Wikipedia (http://en.wikipedia.org/wiki/Roman_numerals)Input to your
program consists of lines of text detailing your notes on the conversion between
intergalactic units and roman numerals. You are expected to handle invalid
queries appropriately. 


Test input: 
------------- 
glob is I 
prok is V 
pish is X 
tegj is L 
glob glob Silver is 34 Credits 
glob prok Gold is 57800 Credits 
pish pish Iron is 3910 Credits 
how much is pish tegj glob glob ? 
how many Credits is glob prok Silver ? 
how many Credits is glob prok Gold ? 
how many Credits is glob prok Iron ? 
how much wood could a woodchuck chuck if a woodchuck could chuck wood ? 

Test Output: 
--------------- 
pish tegj glob glob is 42 
glob prok Silver is 68 Credits 
glob prok Gold is 57800 Credits 
glob prok Iron is 782 Credits 
I have no idea what you are talking about
  
* DONE salestax 
  file:///home/michieljoris/tmp/TW/TW/Case%20Study%20On%20Sales%20Tax%20Problem%20%28Java%20in%20General%20forum%20at%20JavaRanch%29.html
  file:///home/michieljoris/tmp/TW/TW/Java%20Technology%20Blog%20%20Design%20Problem%20Sales%20Tax%20Problem%20Statement.html
  file:///home/michieljoris/tmp/TW/TW/mikechau%20thoughtworks-sales-tax%20%C2%B7%20GitHub.html
  file:///home/michieljoris/tmp/TW/TW/Sales%20Tax%20problem%20form%20thoughtworks%20for%20Interview%20%20%20Techruminations%27s%20Blog.html
  PROBLEM ONE : SALES TAXES
Basic sales tax is applicable at a rate of 10% on all goods, except books, food,
and medical products that are exempt. Import duty is an additional sales tax
applicable on all imported goods at a rate of 5%, with no exemptions.

When I purchase items I receive a receipt which lists the name of all the items
and their price (including tax), finishing with the total cost of the items,
and the total amounts of sales taxes paid.  The rounding rules for sales tax are
that for a tax rate of n%, a shelf price of p contains (np/100 rounded up to
the nearest 0.05) amount of sales tax.

Write an application that prints out the receipt details for these shopping baskets...
INPUT:
Input 1:
1 book at 12.49
1 music CD at 14.99
1 chocolate bar at 0.85

Input 2:
1 imported box of chocolates at 10.00
1 imported bottle of perfume at 47.50

Input 3:
1 imported bottle of perfume at 27.99
1 bottle of perfume at 18.99
1 packet of headache pills at 9.75
1 box of imported chocolates at 11.25

OUTPUT
Output 1:
1 book: 12.49
1 music CD: 16.49
1 chocolate bar: 0.85
Sales Taxes: 1.50
Total: 29.83

Output 2:
1 imported box of chocolates: 10.50
1 imported bottle of perfume: 54.65
Sales Taxes: 7.65
Total: 65.15

Output 3:
1 imported bottle of perfume: 32.19
1 bottle of perfume: 20.89
1 packet of headache pills: 9.75
1 imported box of chocolates: 11.85
Sales Taxes: 6.70
Total: 74.68
  
* DONE conway's game of life
  use webworkers in conway.js?,
  make sure ui is not bottleneck, so only update once every 1/30th of a second,
  and accumulate changes, without touching the canvas
   file:///home/michieljoris/tmp/TW/TW/Conway%27s%20Game%20of%20Life%20-%20Wikipedia,%20the%20free%20encyclopedia.html
   http://www.gamedev.net/page/resources/_/technical/graphics-programming-and-theory/graphics-programming-black-book-r1698
   http://stackoverflow.com/questions/40485/optimizing-conways-game-of-life
   http://en.wikipedia.org/wiki/Hashlife
   
* airlines  
  nterview Question – An airlines company has several planes of the same type.Each plane has a seating capacity of 24 - 3 rows and 8 seats in each row split has shown.
[] [] [] [] [] [] [] []

If 4 people book-allocate 4 seats in middle row.Else 2 on the right and 2 on the left.
if 3 people book- id middle section is empty,allocate there continuously.Else go to next row middle section.
if 2 people book-allocate the edge seats.
if 1 person has booked -then allocate whatever free seat available.

eg-input 4
output-1c 1d 1e 1f

input-3
output- 2c 2d 2e

input-2
output-1a 1b.
This to be done using c++   Answer QuestionXS
* conference
  file:///home/michieljoris/tmp/tw/tw/solution%20for%20tech%20problems%20%20problem%20statement%20-%20conference%20track%20management.html
  problem statement - conference track management

you are planning a big programming conference and have received many proposals which have passed the initial screen process but you're having trouble fitting them into the time constraints of the day -- there are so many possibilities! so you write a program to do it for you.

· the conference has multiple tracks each of which has a morning and afternoon session.
· each session contains multiple talks.
· morning sessions begin at 9am and must finish by 12 noon, for lunch.
· afternoon sessions begin at 1pm and must finish in time for the networking event.
· the networking event can start no earlier than 4:00 and no later than 5:00.
· no talk title has numbers in it.
· all talk lengths are either in minutes (not hours) or lightning (5 minutes).
· presenters will be very punctual; there needs to be no gap between sessions.

note that depending on how you choose to complete this problem, your solution may give a different ordering or combination of talks into tracks. this is acceptable; you don’t need to exactly duplicate the sample output given here.

test input :-
------------

writing fast tests against enterprise rails 60min
overdoing it in python 45min
lua for the masses 30min
ruby errors from mismatched gem versions 45min
common ruby errors 45min
rails for python developers lightning
communicating over distance 60min
accounting-driven development 45min
woah 30min
sit down and write 30min
pair programming vs noise 45min
rails magic 60min
ruby on rails: why we should move on 60min
clojure ate scala (on my project) 45min
programming in the boondocks of seattle 30min
ruby vs. clojure for back-end development 30min
ruby on rails legacy app maintenance 60min
a world without hackernews 30min
user interface css in rails apps 30min

test output :-
-------------

track 1:
09:00am writing fast tests against enterprise rails 60min
10:00am communicating over distance 60min
11:00am rails magic 60min
12:00pm lunch
01:00pm ruby on rails: why we should move on 60min
02:00pm common ruby errors 45min
02:45pm accounting-driven development 45min
03:30pm pair programming vs noise 45min
04:15pm user interface css in rails apps 30min
04:45pm rails for python developers lightning
04:50pm networking event

track 2:
09:00am ruby on rails legacy app maintenance 60min
10:00am overdoing it in python 45min
10:45am ruby errors from mismatched gem versions 45min
11:30am lua for the masses 30min
12:00pm lunch
01:00pm clojure ate scala (on my project) 45min
01:45pm woah 30min
02:15pm sit down and write 30min
02:45pm programming in the boondocks of seattle 30min
03:15pm ruby vs. clojure for back-end development 30min
03:45pm a world without hackernews 30min
04:15pm networking event

